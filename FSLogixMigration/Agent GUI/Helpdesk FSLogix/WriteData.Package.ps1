#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 872c484a-29ae-4e33-9294-f8439456e7a9
# Source File: C:\Users\f.malaeb\Documents\SAPIEN\PowerShell Studio\Projects\Helpdesk FSLogix\WriteData.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
8QEAAB+LCAAAAAAABACFkV1vwiAUhu9N/A+Ee6y2bLYJcrGYLl7sI2q2y4XV08mG0AB18d8PV2o0
27I7nvDyvDkctoTK7MEe5sILPhwgxB6teYfKf0PAJ7BOGs3T0ZglPcS7UipYzHk+TSuaU0HSQgCh
kGWkSAtK6pxmBb26hqkoWBLD8WlsWR8a4EF8jr3cqE2oQ8l5m4sQEd20Um1meIz5ygvr22bUONd1
/ZVEq62wEI5r2wJGS6jBgq6gbHXlw3AzvNB78wHkVplXoV4aN8G8O7tgn/xj/8W32ppPciekLo3d
BV+NeU9BWF8IO+jGPH1LRw9Wvkkt1DFwL3bAn630cFxcsDQhyZIfkeGAJRcr/gKUcW/U8QEAAA==#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2017 v5.4.135
     Generated on:       31-May-21 2:07 PM
     Generated by:       f.malaeb
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2017
#>



#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
2gMAAB+LCAAAAAAABAC9k0tLAzEQgO+C/yH0vGR33a5rIbsglV4EFVfUazadLcE8yiRpyb+3rVJF
QaGHMJd5MPMxL/YIwm4A4w33nOwUJ61pJxe0nHTnZ4Swe5QrabhaSAV3XEPXe44+rOnaOZb/ih5y
rp0DPSgJ7mB/eWKnnbCo5JCR50/WlBZ7ycg8KB8QWgPBI1cZeQi7GuIW4pN9A9MOTcNrUV+Ws2oK
xdWM5ceqPyl9dB50CgZ9kWZpt44uLGqXhLjfVBoQ8q00q1NYRTXWYzOW5bIueMX/Z71qlaSnuUVI
MzyJILzF2ANupICTbuPvMR7Nj0dj+fdf7t4BtbYVHtoDAAA=#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pss

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	
#endregion Source: Globals.ps1

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
UisAAB+LCAAAAAAABADdmm1v4jgQx9+vtN/BymtEScLjCpAKLXvVtXtV4Xr3olJlkgFyOHEudlq4
T392AhwtCdg8iVtVqlqSYcb+/zyecdJ8Aoe+QTS/wRwj8QfzaNAyrKJptL9+Qaj5W+SNvQCTnkfg
B/ah/YC9oEcjvxiyUfNq43JqNPwLHI74PISW0Z8zDn7xDy9w6TsrStv0dwFlXSqg50UU5WJJ/hRQ
NyY8jqAVQMwjTAroMR4Sz/kV5gM6haA1rNVwxalUzYZdhlK9YaBAhNIyRuL7fgESusCmvf49HXsz
AzkTj7iRsDK6NOARJSwdqQj7MaIhRHy+ML+OOe07mMCN50MgQxK3VgvItJtXy1t3mT5QF4x2T3ja
adMlHgS87/0jDGzLLqByubrT6AHPPF+YdOhMuMGEwU4TKZPRzpibnZYDmHGjvbRCuWa3b2IgC5t7
it1Mb6/ySvMquXdpuJsbGYIY68nR4TPO8Btwug2YzRm6pw7mIgCjXRPO7XJpY3Ly9Fg5VLBIGbHK
ZgFZKh4GeHgXuCAIMU2V2xOZX14e5nJV9yESaeHl+ebuCf6OgXG2KfhVKpy6jPd4COTkIhLppS9m
daApY7J8k0keRPHmitqmu9mQum9miDzd12JUVr5iZiahrcIrcZIIL4NBA/rtGDJ7wfRMUgtPMYNI
T2eZl4XGeEJ9XECNkBcQ43MCrQ4lrp7sQhL1xb6MVn2t18R+YOlJ3lC7u89pqMx5SogMP+F2M5tc
OiNJ2I/0HaL+BAjpis0HIof6h3BTL1qVQ9ARO72lItZ/7OSNQp2nuj5PtZPx9HkkxayhXPQm0wFR
4UCXhnMvGH+ndEyge+Itp5c4JDQy2k+gR1y5JvaohqW3R2UNUZ03W7i0NsvZbbxVVPlBM598YyF2
xAdhBEwWLEY7jRc5acAojRh1JxH1AXUonfo4miIfTwF9/cKE8ohPAMmsLBYyjvgnC8wRAcwA0cDJ
qLG14ezEnNPg5HQOEzd9OaB9K1mZKuyqinYpLWsulfkwJZKa+aisXtEkeirc/juDZ4/FmPRlKu9g
Z7pYYXlrcr3TEf2bM/0w/Nfko089jjYp3yMah+foecbS0ZDOrH1JscuiLq2qrNuUlJVD9TySlL4V
xa1oAYoiVunGld1D55ElGyRRKyOZFrOMLicP8OAJfCoS41Ztt9Ypst80MxvO3FSw9Kpkk0pcq+Rk
gm0SZxGUp5lGRLr5ICcjLGchKx9sZIQLo+badfdHxirtQYzweGpcsk5B8nBRDedorAiHxwPl3mNn
OS8jws9IJENdVmQcmHNRod0GeEjA3TZfuZzJQ9msDiq/h0qj1eDMsusF1Mja27aBlnkk8KkCuPyC
wDykIKip9xkrf3r1QF2vHFCJZ99yQPT+YvIPqwi6E3Cm55DXmUw92W4HsKM32H7wZeWcQuepvOZW
Y/2ZtjyxyKr5dXuEPPHuFkGh21koErfoA3v47SSpf59Efk4qQs+RpuxAKmydlLzmVoeKUnkPKhTL
hfRsSieoQ2sAqTG43QkOxnInXJuT14/XjlEanJOoh5h5zmF1ZKWuR1Pi8uQo6TQe6hH9bAnlhjqx
L3jVzigL6jWKwsSizzEXki6sNYtJCZtu6loN8OTA6bQuelH9dNABm8oa7n+CnG4NtRieDnBmdQ/g
1MJaAKcR04G4XfTjIDG2KBHqbG8dyCJc4xniepDqrx3U9F87UG6dcqPRF/qM7wjtJ/TaW0IVxcdi
qW5rHtUfrdh5DZrOmv+gwsd/rhkDX0wYsOW9i0/mbZ85NCLe8AiT3rxafetnL6nM5/BxdJR2e5Tv
ZZ7HUYTfvWC8j6+SPaqMaiPTdCslbOPdvv70yVnG1BVt/PEdrf5NkW9erb9D2/4XrxMRQFIrAAA=#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formHelpdeskFSLogix = New-Object 'System.Windows.Forms.Form'
	$txtsaveto = New-Object 'System.Windows.Forms.TextBox'
	$labelSaveTo = New-Object 'System.Windows.Forms.Label'
	$linkuser = New-Object 'System.Windows.Forms.LinkLabel'
	$linklabelPowerShellCentercom = New-Object 'System.Windows.Forms.LinkLabel'
	$labelBeforeCopyingGoogleC = New-Object 'System.Windows.Forms.Label'
	$buttonStart = New-Object 'System.Windows.Forms.Button'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$btnRemove = New-Object 'System.Windows.Forms.Button'
	$btnAdd = New-Object 'System.Windows.Forms.Button'
	$listfile = New-Object 'System.Windows.Forms.ListBox'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$chkinternet = New-Object 'System.Windows.Forms.CheckBox'
	$chkpictures = New-Object 'System.Windows.Forms.CheckBox'
	$chkMusic = New-Object 'System.Windows.Forms.CheckBox'
	$chkDocuments = New-Object 'System.Windows.Forms.CheckBox'
	$chkDesktop = New-Object 'System.Windows.Forms.CheckBox'
	$labelUserName = New-Object 'System.Windows.Forms.Label'
	$txtUserName = New-Object 'System.Windows.Forms.TextBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formHelpdeskFSLogix_Load={
		#TODO: Initialize Form Controls here
		$linkuser.Text="$($Env:USERNAME)@$($env:USERDNSDOMAIN)"
	}
	
	$chkpictures_CheckedChanged={
		#TODO: Place custom script here
		
	}
	
	#region Control Helper Functions
	function Update-ListBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ListBox or CheckedListBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ListBox control.
		
		.PARAMETER ListBox
			The ListBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ListBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ListBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ListBox $ListBox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ListBox $listBox1 "Red" -Append
			Update-ListBox $listBox1 "White" -Append
			Update-ListBox $listBox1 "Blue" -Append
		
		.EXAMPLE
			Update-ListBox $listBox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ListBox]
			$ListBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]
			$DisplayMember,
			[switch]
			$Append
		)
		
		if (-not $Append)
		{
			$listBox.Items.Clear()
		}
		
		if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection] -or $Items -is [System.Collections.ICollection])
		{
			$listBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$listBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$listBox.Items.Add($obj)
			}
			$listBox.EndUpdate()
		}
		else
		{
			$listBox.Items.Add($Items)
		}
		
		$listBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	$btnAdd_Click={
		#TODO: Place custom script here
		$UserIn = Read-Host -Prompt "Type the path you want to add, assuming you already in the Main user Profile."
		if ((([string]::IsNullOrEmpty($UserIn))) -or ($UserIn.StartsWith(" "))) { [System.Windows.Forms.MessageBox]::Show('The Input is invalid', 'Blank input') }
		else{ $listfile.Items.Add($UserIn)}
		
	}
	
	$btnRemove_Click={
		#TODO: Place custom script here
		$listfile.Items.Remove($listfile.SelectedItem)
	}
	
	$buttonStart_Click={
		#TODO: Place custom script here
		$FullFile=@()
			$Folders = @()
		if ($chkDesktop.Checked) { $Folders += "Desktop" }
		if ($chkDocuments.Checked) { $Folders += "Documents" }
		if ($chkinternet.checked) { $Folders += "Favorites" }
		if ($chkMusic.Checked) { $Folders += "Pictures" }
		if ($chkMusic.Checked) { $Folders += "Music" }
		$FullFile += ("CopyDataFrom=" + ($Folders -join ","))
		if ($listfile.Items.Count -gt 0)
		{
			$FullFile += ("CopyFiles=" + ($listfile.Items -join ","))
		}
		Else { $FullFile += "CopyFiles=" }
		$FullFile+="Agent=$($linkuser.Text)"
		
	
		try
		{
			Add-Content -Path (Join-Path -Path $txtsaveto.Text -ChildPath "$($txtUserName.Text).dat") -Value $FullFile
			[System.Windows.Forms.MessageBox]::Show('Request Submited', ':)')
		}
		catch
		{
			[System.Windows.Forms.MessageBox]::Show($Error[0], ':(')
			
		}
		
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formHelpdeskFSLogix.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_txtsaveto = $txtsaveto.Text
		$script:MainForm_listfile = $listfile.SelectedItems
		$script:MainForm_chkinternet = $chkinternet.Checked
		$script:MainForm_chkpictures = $chkpictures.Checked
		$script:MainForm_chkMusic = $chkMusic.Checked
		$script:MainForm_chkDocuments = $chkDocuments.Checked
		$script:MainForm_chkDesktop = $chkDesktop.Checked
		$script:MainForm_txtUserName = $txtUserName.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonStart.remove_Click($buttonStart_Click)
			$btnRemove.remove_Click($btnRemove_Click)
			$btnAdd.remove_Click($btnAdd_Click)
			$chkpictures.remove_CheckedChanged($chkpictures_CheckedChanged)
			$formHelpdeskFSLogix.remove_Load($formHelpdeskFSLogix_Load)
			$formHelpdeskFSLogix.remove_Load($Form_StateCorrection_Load)
			$formHelpdeskFSLogix.remove_Closing($Form_StoreValues_Closing)
			$formHelpdeskFSLogix.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formHelpdeskFSLogix.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox1.SuspendLayout()
	#
	# formHelpdeskFSLogix
	#
	$formHelpdeskFSLogix.Controls.Add($txtsaveto)
	$formHelpdeskFSLogix.Controls.Add($labelSaveTo)
	$formHelpdeskFSLogix.Controls.Add($linkuser)
	$formHelpdeskFSLogix.Controls.Add($linklabelPowerShellCentercom)
	$formHelpdeskFSLogix.Controls.Add($labelBeforeCopyingGoogleC)
	$formHelpdeskFSLogix.Controls.Add($buttonStart)
	$formHelpdeskFSLogix.Controls.Add($groupbox2)
	$formHelpdeskFSLogix.Controls.Add($groupbox1)
	$formHelpdeskFSLogix.Controls.Add($labelUserName)
	$formHelpdeskFSLogix.Controls.Add($txtUserName)
	$formHelpdeskFSLogix.AutoScaleDimensions = '6, 13'
	$formHelpdeskFSLogix.AutoScaleMode = 'Font'
	$formHelpdeskFSLogix.ClientSize = '323, 446'
	$formHelpdeskFSLogix.MaximizeBox = $False
	$formHelpdeskFSLogix.Name = 'formHelpdeskFSLogix'
	$formHelpdeskFSLogix.Text = 'Helpdesk FSLogix'
	$formHelpdeskFSLogix.add_Load($formHelpdeskFSLogix_Load)
	#
	# txtsaveto
	#
	$txtsaveto.Location = '70, 340'
	$txtsaveto.Name = 'txtsaveto'
	$txtsaveto.Size = '241, 20'
	$txtsaveto.TabIndex = 11
	$txtsaveto.Text = '\\MyFileServer\VDIRequests'
	#
	# labelSaveTo
	#
	$labelSaveTo.AutoSize = $True
	$labelSaveTo.Location = '19, 343'
	$labelSaveTo.Name = 'labelSaveTo'
	$labelSaveTo.Size = '51, 13'
	$labelSaveTo.TabIndex = 10
	$labelSaveTo.Text = 'Save To:'
	#
	# linkuser
	#
	$linkuser.Font = 'Tahoma, 9pt, style=Bold'
	$linkuser.Location = '11, 0'
	$linkuser.Name = 'linkuser'
	$linkuser.Size = '273, 23'
	$linkuser.TabIndex = 9
	$linkuser.TabStop = $True
	$linkuser.Text = 'linklabel1'
	#
	# linklabelPowerShellCentercom
	#
	$linklabelPowerShellCentercom.Font = 'Tahoma, 8.25pt, style=Bold'
	$linklabelPowerShellCentercom.Location = '1, 429'
	$linklabelPowerShellCentercom.Name = 'linklabelPowerShellCentercom'
	$linklabelPowerShellCentercom.Size = '283, 23'
	$linklabelPowerShellCentercom.TabIndex = 7
	$linklabelPowerShellCentercom.TabStop = $True
	$linklabelPowerShellCentercom.Text = 'PowerShellCenter.com'
	#
	# labelBeforeCopyingGoogleC
	#
	$labelBeforeCopyingGoogleC.AutoSize = $True
	$labelBeforeCopyingGoogleC.ForeColor = 'Red'
	$labelBeforeCopyingGoogleC.Location = '47, 392'
	$labelBeforeCopyingGoogleC.Name = 'labelBeforeCopyingGoogleC'
	$labelBeforeCopyingGoogleC.Size = '237, 26'
	$labelBeforeCopyingGoogleC.TabIndex = 5
	$labelBeforeCopyingGoogleC.Text = 'Before copying Google Chrome Bookmark make 
sure the user start Google Chrome at lease once'
	#
	# buttonStart
	#
	$buttonStart.Location = '83, 366'
	$buttonStart.Name = 'buttonStart'
	$buttonStart.Size = '147, 23'
	$buttonStart.TabIndex = 4
	$buttonStart.Text = 'Start '
	$buttonStart.UseVisualStyleBackColor = $True
	$buttonStart.add_Click($buttonStart_Click)
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($btnRemove)
	$groupbox2.Controls.Add($btnAdd)
	$groupbox2.Controls.Add($listfile)
	$groupbox2.Location = '34, 165'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '251, 157'
	$groupbox2.TabIndex = 3
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'File To Copy'
	#
	# btnRemove
	#
	$btnRemove.Location = '141, 120'
	$btnRemove.Name = 'btnRemove'
	$btnRemove.Size = '75, 23'
	$btnRemove.TabIndex = 2
	$btnRemove.Text = 'Remove'
	$btnRemove.UseVisualStyleBackColor = $True
	$btnRemove.add_Click($btnRemove_Click)
	#
	# btnAdd
	#
	$btnAdd.Location = '20, 120'
	$btnAdd.Name = 'btnAdd'
	$btnAdd.Size = '75, 23'
	$btnAdd.TabIndex = 1
	$btnAdd.Text = 'Add'
	$btnAdd.UseVisualStyleBackColor = $True
	$btnAdd.add_Click($btnAdd_Click)
	#
	# listfile
	#
	$listfile.FormattingEnabled = $True
	$listfile.Location = '6, 19'
	$listfile.Name = 'listfile'
	$listfile.Size = '238, 95'
	$listfile.TabIndex = 0
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($chkinternet)
	$groupbox1.Controls.Add($chkpictures)
	$groupbox1.Controls.Add($chkMusic)
	$groupbox1.Controls.Add($chkDocuments)
	$groupbox1.Controls.Add($chkDesktop)
	$groupbox1.Location = '34, 72'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '251, 87'
	$groupbox1.TabIndex = 2
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Folders To Copy'
	#
	# chkinternet
	#
	$chkinternet.Location = '112, 20'
	$chkinternet.Name = 'chkinternet'
	$chkinternet.Size = '133, 24'
	$chkinternet.TabIndex = 4
	$chkinternet.Text = 'Internet Explorer Fav'
	$chkinternet.UseVisualStyleBackColor = $True
	#
	# chkpictures
	#
	$chkpictures.Location = '112, 39'
	$chkpictures.Name = 'chkpictures'
	$chkpictures.Size = '104, 24'
	$chkpictures.TabIndex = 3
	$chkpictures.Text = 'Pictures'
	$chkpictures.UseVisualStyleBackColor = $True
	$chkpictures.add_CheckedChanged($chkpictures_CheckedChanged)
	#
	# chkMusic
	#
	$chkMusic.Location = '20, 58'
	$chkMusic.Name = 'chkMusic'
	$chkMusic.Size = '104, 24'
	$chkMusic.TabIndex = 2
	$chkMusic.Text = 'Music'
	$chkMusic.UseVisualStyleBackColor = $True
	#
	# chkDocuments
	#
	$chkDocuments.Checked = $True
	$chkDocuments.CheckState = 'Checked'
	$chkDocuments.Location = '20, 39'
	$chkDocuments.Name = 'chkDocuments'
	$chkDocuments.Size = '104, 24'
	$chkDocuments.TabIndex = 1
	$chkDocuments.Text = 'Documents'
	$chkDocuments.UseVisualStyleBackColor = $True
	#
	# chkDesktop
	#
	$chkDesktop.Checked = $True
	$chkDesktop.CheckState = 'Checked'
	$chkDesktop.Location = '20, 20'
	$chkDesktop.Name = 'chkDesktop'
	$chkDesktop.Size = '116, 24'
	$chkDesktop.TabIndex = 0
	$chkDesktop.Text = 'Desktop'
	$chkDesktop.UseVisualStyleBackColor = $True
	#
	# labelUserName
	#
	$labelUserName.AutoSize = $True
	$labelUserName.Location = '12, 29'
	$labelUserName.Name = 'labelUserName'
	$labelUserName.Size = '57, 13'
	$labelUserName.TabIndex = 1
	$labelUserName.Text = 'UserName'
	#
	# txtUserName
	#
	$txtUserName.Location = '75, 26'
	$txtUserName.Name = 'txtUserName'
	$txtUserName.Size = '132, 20'
	$txtUserName.TabIndex = 0
	$groupbox1.ResumeLayout()
	$groupbox2.ResumeLayout()
	$formHelpdeskFSLogix.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formHelpdeskFSLogix.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formHelpdeskFSLogix.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formHelpdeskFSLogix.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formHelpdeskFSLogix.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formHelpdeskFSLogix.ShowDialog()

}
#endregion Source: MainForm.psf

#Start the application
Main ($CommandLine)
